datasource db {
  provider  = "postgresql"
  url       = env("SUPABASE_CONNECTION_STRING")
  directUrl = env("PRIMSA_MIGRATION_CONNECTION_STRING")
}

generator client {
  provider = "prisma-client-js"
}

model Document {
  id        String                 @id @default(cuid())
  content   String
  namespace String?                @default("default")
  index     Index                  @relation(fields: [indexId], references: [id])
  indexId   String
  vector    Unsupported("vector")?
}

model Index {
  id          String     @id @default(cuid())
  name        String
  description String
  prompt      String?
  tags        String[]
  questions   String[]
  likes       BigInt     @default(0)
  published   Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  author      User?      @relation(fields: [authorId], references: [id])
  authorId    String?
  Documents   Document[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  indexes       Index[]
  likedIndexIds String[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
